library(tidyverse)
library(brms)
library(tidybayes)
options(stringsAsFactors=F)
dataOG = read.csv('p0Pyk30.csv')
#make two separate data frames in long form:
## 1. for WT and p0Pyk
## 2. for p0
p0PykData = dataOG %>%
gather(key = groups, value = abundance, 1:7)
head(p0PykData)
library(tidyverse)
library(brms)
library(tidybayes)
options(stringsAsFactors=F)
dataOG = read.csv('p0Pyk30.csv')
#make two separate data frames in long form:
## 1. for WT and p0Pyk
## 2. for p0
p0PykData = dataOG %>%
gather(key = groups, value = abundance, 2:7) %>%
rename(metabolite = Normalized by OD600) %>%
head(p0PykData)
library(tidyverse)
library(brms)
library(tidybayes)
options(stringsAsFactors=F)
dataOG = read.csv('p0Pyk30.csv')
#make two separate data frames in long form:
## 1. for WT and p0Pyk
## 2. for p0
p0PykData = dataOG %>%
gather(key = groups, value = abundance, 2:7) %>%
rename(metabolite = Normalized by OD600) %>%
head(p0PykData)
# set working directory
setwd("C:/Users/oyina/src/senior_2019-2020/spring_2020/political_data_science/group_work")
senateData<-read_csv("CandidateLevel")
library(tidyverse)
# load in data
senateData<-read.csv("CandidateLevel")
# load in data
senateData<-read.csv("CandidateLevel.csv")
View(senateData)
View(senateData)
senateData_ReM = senateData %>%
mutate(IncumbentWon = (Incumbent == 1 & VotePercentage >= 0.5))
View(senateData_ReM)
View(senateData_ReM)
senateData_ReM = senateData %>%
mutate(IncumbentWon = (Incumbent == 1 & VotePercentage >= 0.5)) %>%
filter(Incumbent == 1)
senatetest2016 = senateData_ReM[cycle == 2016,]
senatetest2016 = senateData_ReM[,senateData_ReM$cycle == 2016]
senatetest2016 = senateData_ReM[senateData_ReM$cycle == 2016,]
View(senatetest2016)
View(senatetest2016)
senateTrain = senateData_ReM[senateData_ReM$cycle != 2016,]
senateTest2016 = senateData_ReM[senateData_ReM$cycle == 2016,]
View(senateTrain)
senateData_ReM = senateData %>%
mutate(IncumbentWon = (Incumbent == 1 & VotePercentage >= 50)) %>%
filter(Incumbent == 1)
# subset into test and train
senateTrain = senateData_ReM[senateData_ReM$cycle != 2016,]
senateTest2016 = senateData_ReM[senateData_ReM$cycle == 2016,]
senateTest = senateData_ReM[senateData_ReM$cycle == 2016,]
# linear prob model
ProjectModelTrain<-lm(IncumbentWon~pvi*Republican+PercentageRaised+GenericBallotSept, data=senateTrain)
summary(ProjectModelTrain)
predict(Model2, sensateTest)
predict(Model2, senateTest)
predict(ProjectModelTrain, senateTest)
# linear prob model
ProjectModelTrain<-glm(IncumbentWon~pvi*Republican+PercentageRaised+GenericBallotSept, data=senateTrain)
summary(ProjectModelTrain)
predict(ProjectModelTrain, senateTest)
# linear prob model
ProjectModelTrain<-glm(IncumbentWon~pvi*Republican+PercentageRaised+GenericBallotSept, data=senateTrain, family="binomial")
summary(ProjectModelTrain)
predict(ProjectModelTrain, senateTest)
# linear prob model
ProjectModelTrain<-glm(IncumbentWon~pvi*Republican+PercentageRaised+GenericBallotSept, data=senateTrain, family="binomial")
summary(ProjectModelTrain)
predict(ProjectModelTrain, senateTest, type="response")
result = predict(ProjectModelTrain, senateTest, type="response")
# confusion matrix
binary_result = (result > 0.5)*1
conf_mat = table(binary_result, senateData_ReM$IncumbentWon)
conf_mat = table(binary_result, senateTest$IncumbentWon)
conf_mat
precision = conf_mat[2,2]/(conf_mat[2,2]+conf_mat[2,1])
recall = conf_mat[2,2]/(conf_mat[2,2]+conf_mat[1,2])
precision
recall
# random forest
library(rpart)
